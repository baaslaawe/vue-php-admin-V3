<template>
  <div class="app-container">
    <div class="filter-container">
      <el-input placeholder="名称" v-model="listQuery.title" style="width: 200px;" class="filter-item" @keyup.enter.native="handleFilter" />
      <el-button v-waves class="filter-item" type="primary" :size="btnsize" icon="el-icon-search" v-perm="['/sys/role/view']" @click="handleFilter">查询</el-button>
      <el-button class="filter-item" style="margin-left: 10px;" type="primary" :size="btnsize" icon="el-icon-plus" v-perm="['/sys/role/add']" @click="handleCreate">{{ $t('table.add') }}</el-button>
    </div>

    <!-- @query-change="loadData" -->
    <data-tables :data="list" :table-props="tableProps" :loading="listLoading" @current-change="handleRoleSelectChange" :pagination-props="{ pageSizes: [5, 10, 15,20] }">
      <el-table-column v-for="title in titles" :prop="title.prop" :label="title.label" :key="title.label" sortable="custom">
      </el-table-column>

      <el-table-column label="状态" min-width="100px">
        <template slot-scope="scope">
          <el-tag :type="scope.row.status | statusFilter" size="small">{{ scope.row.status | statusChange }}</el-tag>
        </template>
      </el-table-column>
      <el-table-column label="操作" align="center" min-width="100px">
        <template slot-scope="scope">
          <el-button :size="btnsize" type="success" v-perm="['/sys/role/edit']" @click="handleUpdate(scope.row)">编辑</el-button>
          <el-button :size="btnsize" type="danger" v-perm="['/sys/role/del']" @click="handleDelete(scope.row)">删除</el-button>
        </template>
      </el-table-column>
    </data-tables>

    

 
    <data-tables ref="roleTable" :data="list" :table-props="tableProps" :loading="listLoading" :pagination-props="{ pageSizes: [10,30,100] }">
      <el-table-column type="selection" width="55">
      </el-table-column>

      <el-table-column v-for="title in rtitles" :prop="title.prop" :label="title.label" :key="title.label">
      </el-table-column>
  
    </data-tables>

    <div style="margin-top: 20px">
      <el-button @click="toggleSelection(list)">全选</el-button>
      <el-button @click="toggleSelection([list[1]])">切换第二行的选中状态</el-button>

      <el-button @click="toggleSelection()">取消选择</el-button>
    </div>
  </div>
</template>

<script>
import waves from '@/directive/waves' // Waves directive
import perm from '@/directive/perm/index.js' // 权限判断指令

import { createRole, updateRole, deleteRole, getRoleList, getAllMenus, getRoleMenu, getRoleRole, saveRolePerms } from '@/api/role'

import random from 'string-random'

export default {
  name: 'SysRoleCkoF',
  // 所以在编写路由 router 和路由对应的 view component 的时候一定要确保 两者的 name 是完全一致的。
  // register the component Treeselect, TreeTable
  components: {},
  directives: { waves, perm },
  filters: {
    statusFilter(status) {
      const statusMap = {
        1: 'success',
        0: 'danger'
      }
      return statusMap[status]
    },
    statusChange(status) {
      const statusMapx = {
        1: '启用',
        0: '禁用'
      }
      return statusMapx[status]
    }
  },
  data() {
    return {
      list: [],
      total: 0,
      listLoading: true,
      listQuery: {
        page: 1,
        limit: 10
      },
      titles: [
        {
          prop: 'id',
          label: 'ID'
        },
        {
          prop: 'name',
          label: '角色名称'
        },
        {
          prop: 'remark',
          label: '说明'
        },
        // {
        //   prop: 'status',
        //   label: '状态'
        // },
        {
          prop: 'listorder',
          label: '排序'
        },
      ],
      rtitles: [
        {
          prop: 'perm_id',
          label: '权限ID'
        },
        {
          prop: 'id',
          label: 'ID'
        },
        {
          prop: 'name',
          label: '角色名称'
        },
        {
          prop: 'remark',
          label: '说明'
        },

        {
          prop: 'listorder',
          label: '排序'
        },
      ],
      tableProps: {
        border: false,
        stripe: true,
        highlightCurrentRow: true,
        defaultSort: {
          prop: 'listorder',
          order: 'ascending'
        }
      },
      selectRole: {},
      menuData: [],
      menuSelections: [],
      menuLoading: false,
      authLoading: false,
      checkAll: false,
      currentRoleMenus: [],
      currentRoleRoles: [],
      defaultProps: {
        children: 'children',
        label: 'title'
      },
      menuLoading: false,
      tabMapOptions: [
        { label: '菜单类', key: 'menu' },
        { label: '角色类', key: 'role' },
        { label: '文件类', key: 'file' }
      ],
      activeName: 'menu',

      // 'href': windows.location.href,
      // path: this.$route.path,
      // params: this.$route.params,
      btnsize: "mini",
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: '编辑',
        create: '新增'
      },
      temp: {
        id: undefined,
        name: '',
        remark: '',
        status: '1',
        listorder: 99
      },
      rules: {
        name: [{ required: true, message: '请输入角色名', trigger: 'blur' }]
      },
    }
  },

  created() {
    this.fetchData()
  },
  methods: {

    handleSelectionChange(val) {
      // this.selectedRow = val
      console.log('handleSelectionChange', val)
    },

    // 获取数据
    fetchData() {
      this.listLoading = true
      this.menuLoading = true
      // import { createRole, getRoleList } from '@/api/menu'
      getRoleList().then(res => {
        console.log('getRoleList', res)
        this.list = res.data.items
        this.total = res.data.total
        this.listLoading = false
      })

      getAllMenus().then(res => {
        // console.log('getAllMenus', res)
        this.menuData = res.data
        this.menuLoading = false
      })
    },
    handleTabClick(tab, event) {
      console.log(tab, event);
    },
    toggleSelection(rows) {
      console.log(rows)
      if (rows) {
        rows.forEach(row => {
          this.$refs.roleTable.$refs.elTable.toggleRowSelection(row);
        });
      } else {
        this.$refs.roleTable.$refs.elTable.clearSelection();
      }
    },
    // 角色选择改变监听
    handleRoleSelectChange(val) {
      console.log(val)
      if (val === null || val.id === null) {
        return
      }
      this.selectRole = val
 

      getRoleRole({ 'roleId': 1}).then((res) => {
 
        this.currentRoleRoles = res.data
        console.log('currentRoleRoles', this.currentRoleRoles)
        this.toggleSelection(this.list)
      })
    },
    // 树节点选择监听
    handleMenuCheckChange(data, check, subCheck) {
      if (check) {
        // 节点选中时同步选中父节点
        let parentId = data.pid
        this.$refs.menuTree.setChecked(parentId, true, false)
      } else {
        // 节点取消选中时同步取消选中子节点
        if (data.children != null) {
          data.children.forEach(element => {
            this.$refs.menuTree.setChecked(element.id, false, false)
          });
        }
      }
    },
    // 重置选择
    resetSelection() {
      this.checkAll = false
      this.$refs.menuTree.setCheckedNodes(this.currentRoleMenus) // 重置当前菜单类权限
      // this.$refs.roleTable.$refs.elTable.clearSelection() // 重置当前角色类权限
      this.currentRoleRoles.forEach(row => {
        this.$refs.roleTable.$refs.elTable.toggleRowSelection(row);
      });
    },
    // 全选操作
    handleCheckAll() {
      if (this.checkAll) {
        let allMenus = []
        this.checkAllMenu(this.menuData, allMenus)
        this.$refs.menuTree.setCheckedNodes(allMenus)
      } else {
        this.$refs.menuTree.setCheckedNodes([])
      }
    },
    // 递归全选
    checkAllMenu(menuData, allMenus) {
      menuData.forEach(menu => {
        allMenus.push(menu)
        if (menu.children) {
          this.checkAllMenu(menu.children, allMenus)
        }
      });
    },
    // 角色菜单授权提交
    submitAuthForm() {
      let roleId = this.selectRole.id
      if (roleId == 1) {
        this.$message({ message: '超级管理员角色拥有所有权限，不允许修改！', type: 'error' })
        return
      }

      this.authLoading = true
      let checkedNodes = this.$refs.menuTree.getCheckedNodes(false, true)
      let rolePerms = []
      for (let i = 0, len = checkedNodes.length; i < len; i++) {
        let rolePerm = { role_id: roleId, perm_id: checkedNodes[i].perm_id }
        rolePerms.push(rolePerm)
      }

      // console.log('rolePerms', rolePerms)
      saveRolePerms(roleId, rolePerms).then((res) => {
        // console.log('saveRolePerms...', res)
        this.$notify({
          //  title: '错误',
          message: res.message,
          type: res.type
        })
        this.authLoading = false
      })


    },
    renderContent(h, { node, data, store }) {
      return (
        <div class="column-container">
          <span style="text-algin:center;margin-right:200px;">{data.title}</span>
          <span style="text-algin:center;margin-right:200px;">
            <el-tag type={data.type === 0 ? '' : data.type === 1 ? 'success' : 'info'} size="small">
              {data.type === 0 ? '目录' : data.type === 2 ? '功能' : '菜单'}
            </el-tag>
          </span>
          <span style="text-algin:center;margin-right:80px;"> <svg-icon icon-class={data.icon} /> </span>
          <span style="text-algin:center;margin-right:80px;">{data.path ? data.path : '\t'}</span>
          <span style="text-algin:center;margin-right:200px;">id:{data.id} - pid:{data.pid} - perm_id: {data.perm_id}</span>
        </div>)
    },
    resetTemp() {
      this.temp = {
        id: undefined,
        name: '',
        remark: '',
        status: '1',
        listorder: 99
      }
    },
    handleCreate() {
      console.log('handleCreate...click')
      this.resetTemp()
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    createData() {
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          console.log('createData valid done...', this.temp)

          // 调用api创建数据入库
          createRole(this.temp).then(res => {
            // 成功后 关闭窗口
            console.log('createRole...', res)
            this.fetchData()
            this.dialogFormVisible = false
            this.$notify({
              message: res.message,
              type: res.type
            })
          })
        }
      })
    },
    handleUpdate(row) {
      this.temp = Object.assign({}, row) // copy obj
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    updateData() {
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          // 调用api编辑数据入库
          updateRole(this.temp).then(res => {
            if (res.type === 'success') {
              // 后台重新更新数据
              this.fetchData()
              // this.$refs.TreeTable.updateTreeNode(this.temp) // 只能更新自身以下的节点
              this.dialogFormVisible = false
            }
            this.$notify({
              //  title: '错误',
              message: res.message,
              type: res.type
            })
          })
        }
      })
    },
    handleDelete(row) {
      this.$confirm("确认删除选中记录吗？[角色: " + row.name + "]", "提示", {
        type: "warning"
      }).then(() => {
        const tempData = {
          'id': row.id,
          'name': row.name
        }

        // 调用api删除数据
        deleteRole(tempData).then(res => {
          // 如果删除成功，后台重新更新数据,否则不更新数据
          if (res.type === 'success') {
            this.fetchData()
          }
          this.dialogFormVisible = false
          this.$notify({
            //  title: '错误',
            message: res.message,
            type: res.type
          })
        })
      })
    },
    handleFilter() {
      this.listQuery.page = 1
      // this.getList()

    }
  }
}
</script>
 <style scoped>
.menu-container {
  margin-top: 10px;
}
.menu-header {
  padding-left: 8px;
  padding-bottom: 5px;
  text-align: left;
  font-size: 16px;
  color: rgb(20, 89, 121);
}
</style>